<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
]>        

<chapter xml:id="REST"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
        <title>Extensions and ReST</title>
              <para>
                Extensions can define:
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>new elements</para>
                    </listitem>
                    <listitem>
                        <para>new attributes of existing elements</para>
                    </listitem>
                    <listitem>
                        <para>new data</para>
                    </listitem>
                    <listitem>
                        <para>new headers</para>
                    </listitem>
                    <listitem>
                        <para>new states</para>
                    </listitem>
                    <listitem>
                        <para>new resources</para>
                    </listitem>
                    <listitem>
                        <para>new parameters</para>
                    </listitem>
                    <listitem>
                        <para>new MIME types</para>
                    </listitem>
                    <listitem>
                        <para>new capabilities</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                New MIME types can provide support for Atom or plist representation.
            </para>
            <para>
                New capabilities can include the ability to edit an otherwise-uneditable attribute.
            </para>       
            <section>
                <title>Identifying Available Extensions</title>
            <para>
                Extensions are queryable. 
                For any service API, making a single call to <code>/extensions</code> returns information about what extensions are available and how to learn more about them. 
            </para>
            <para> Query <code>/extensions</code> to obtain basic information about an API's
                extensions, including their human-readable names and descriptions, links to
                documentation, and identification of each extension's alias, namespace, and vendor.
                In the example below, the query returns information about two available extensions
                to the API: <code>RAX-PIE</code> and <code>RAX-CBS</code>.</para>
            <example>
                <title>Extension Query: XML</title>
                <?dbfo keep-together="auto"?>
                <programlistingco>
                    <areaspec>
                        <area xml:id="query.human-readable.name" units="linecolumn" coords="5 1"/>
                        <area xml:id="query.human-readable.description" units="linecolumn" coords="14 1"/>
                        <area xml:id="query.docs" units="linecolumn" coords="11 1"/>
                        <area xml:id="query.identifiers" units="linecolumn" coords="7 1"/>
                        <area xml:id="query.vendor.namespace" units="linecolumn" coords="18 1"/>
                        <area xml:id="query.vendor.alias" units="linecolumn" coords="19 1"/>
                    </areaspec>
                    <programlisting language="xml">
<xi:include href="samples/apix-query.xml" parse="text"/>
                    </programlisting>
                </programlistingco>
            </example>
                <calloutlist>
                    <callout arearefs="query.human-readable.name">
                        <para>
                            The query returns the extension's human-readable name.
                        </para>
                    </callout>
                    <callout arearefs="query.human-readable.description">
                        <para>
                            The query returns the extension's human-readable description.
                        </para>
                    </callout>
                    <callout arearefs="query.docs">
                        <para>
                            The query returns links to documentation in multiple formats.
                        </para>
                    </callout>
                    <callout arearefs="query.identifiers">
                        <para>
                            The query uniquely identifies the extension as an alias within a namespace.
                        </para>
                    </callout>
                    <callout arearefs="query.vendor.namespace">
                        <para>
                            The query identifies the extension's vendor in the extension's namespace.
                        </para>
                    </callout>
                    <callout arearefs="query.vendor.alias">
                        <para>
                            The query identifies the extension's vendor in the extension's alias.
                        </para>
                    </callout>
                </calloutlist>
        </section>
        <section>
            <title>Identifying an Extension's Vendor</title>
            <para>
                An extension alias always contains a prefix that identifies the vendor. 
            </para>
            <table frame="all">
                <title>Extension Alias Identifies Vendor</title>
                <tgroup cols="2">
                    <colspec colname="c2" colnum="1" colwidth="1.0*"/>
                    <colspec colname="newCol3" colnum="2" colwidth="8.66*"/>
                    <thead>
                        <row>
                            <entry>Vendor</entry>
                            <entry>Prefix</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Citrix</entry>
                            <entry>
                                <para>
                                    <code>CTX</code>
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>Multi-Vendor</entry>
                            <entry>
                                <code>MLTI</code>
                            </entry>
                        </row>
                        <row>
                            <entry>NASA</entry>
                            <entry>
                                <code>NASA</code></entry>
                        </row>
                        <row>
                            <entry>OpenStack</entry>
                            <entry>
                                <para>
                                    <code>OS</code>... </para>
                            </entry>
                        </row>
                        <row>
                            <entry>Rackspace</entry>
                            <entry>
                                <code>RAX</code>... </entry>
                        </row>
                        <row>
                            <entry>...</entry>
                            <entry> ...</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <para>
                In this example, the <code>RAX</code> prefix in the extension's alias identifies the extension's vendor as Rackspace:
            </para>
            <example>
                <title>Vendor ID in Alias Extension: XML</title>
                <programlisting language="xml">
                <?dbfo keep-together="always"?>
<xi:include href="samples/apix-vendor.xml" parse="text"/>
                </programlisting>
            </example>
            <para>
                Each extension is associated with a namespace; because the namespace is named to identify a vendor, the extension's association with a namespace also identifies the extensions's vendor.
            </para>
            <table frame="all">
                <title>Namespace Identifies Vendor</title>
                <tgroup cols="2">
                    <colspec colname="c2" colnum="1" colwidth="1.0*"/>
                    <colspec colname="newCol3" colnum="2" colwidth="8.69*"/>
                    <thead>
                        <row>
                            <entry>Vendor</entry>
                            <entry>Namespace</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Citrix</entry>
                            <entry>
                                <para>
                                    <code>http://docs.citrix.com</code>... </para>
                            </entry>
                        </row>
                        <row>
                            <entry>NASA</entry>
                            <entry>
                                <code>http://docs.nasa.org</code>... </entry>
                        </row>
                        <row>
                            <entry>OpenStack</entry>
                            <entry>
                                <para>
                                    <code>http://docs.openstack.com/ext/OS/</code>... </para>
                            </entry>
                        </row>
                        <row>
                            <entry>Rackspace</entry>
                            <entry>
                                <code>docs.rackspacecloud.com</code>... </entry>
                        </row>
                        <row>
                            <entry>...</entry>
                            <entry>...</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <para>
                Providing two ways of identifying each extension's vendor improves the likelihood that multiple extensions can coexist without creating conflicts.
                For this purpose, a namespace such as <code>http://docs.rackspacecloud.com/servers/api/ext/pie/v1.0</code> is most useful to XML media types; 
                an alias such as <code>RAX-PIE</code> is most useful to non-XML media types such as JSON, as well as in headers and parameters.
                Because extensions are likely to be implemented by middleware, conflicts are possible without a standardized approach to identifying each extension and its vendor.
            </para>
            <figure xml:id="shared">
                <title>Two extensions add a "shared" attribute; one overrides the other.</title>
                <mediaobject>
                    <imageobject role="fo">
                        <imagedata scale="100" fileref="figures/apix-2extensions-shared.svg" format="SVG" align="center"/>
                    </imageobject>
                    <imageobject role="html">
                        <imagedata fileref="figures/apix-2extensions-shared.png" format="PNG" align="center"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <figure xml:id="filter">
                <title>Two extensions read a "filter" parameter; both are activated.</title>
                <mediaobject>
                    <imageobject role="fo">
                        <imagedata scale="100" fileref="figures/apix-2extensions-filter.svg" format="SVG" align="center"/>
                    </imageobject>
                    <imageobject role="html">
                        <imagedata fileref="figures/apix-2extensions-filter.png" format="PNG" align="center"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>
                OpenStack should maintain a registry associating extension vendors with prefixes and namespaces. 
                Anyone should be able to register this identifying information for a vendor.
                The registration process should not require approval or coordination.
            </para>
        </section>
        <section>
            <title>Extending Data</title>
            <para>
                Extensions can be used to add data.
            </para>
            <para>
                In XML, attributes may be added to elements if they are in the extension namespace. 
                After the final element, elements can be added if "Unique Particle Attribution" is not violated.
            </para>
            <example>
                <title>Extending Data: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">
<xi:include href="samples/apix-data.xml" parse="text"/>
                </programlisting>
            </example>
            <para> In JSON, the action name is the alias followed by a colon. </para>
            <example>
                <title>Extending Data: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="javascript">    
<xi:include href="samples/apix-data.json" parse="text"/>
                </programlisting>
            </example>
        </section>
        <section>
            <title>Extending Actions</title>
            <para>
                In XML, actions are defined by the extension namespace.
            </para>
            <example>
                <title>Extending Actions: XML</title>
                <programlisting language="xml">
                <?dbfo keep-together="always"?>    
<xi:include href="samples/apix-action.xml" parse="text"/>
                </programlisting>
            </example>
            <para> In JSON, the action name is the extension alias followed by a colon followed by a
                unique identification of the action. </para>
            <example>
                <title>Extending Actions: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="javascript">
<xi:include href="samples/apix-action.json" parse="text"/>
                </programlisting>
            </example>
        </section>
        <section>
            <title>Extending Headers and States</title>
            <para>
                To extend a header, name it <code>X-</code> followed by the extension alias followed by a unique identification of the header.
                In the example below, <code>X-Auth-User</code> and <code>X-Auth-Key</code> relate to the core API; 
                <code>X-RAX-CBS-Header1</code> and <code>X-RAX-CBS-Header2</code> relate to the API's RAX-CBS extension.
            </para>
            <example>
                <title>Authentication Request with Extended X-Headers</title>
                <?dbfo keep-together="always"?>
                <literallayout class="monospaced">
GET /v1.0 HTTP/1.1
Host: auth.api.openstack.com
X-Auth-User: jdoe
X-Auth-Key: a86850deb2742ec3cb41518e26aa2d89
X-RAX-CBS-Header1: value1
X-RAX-CBS-Header2: value2
                </literallayout>
            </example>
            <para> To extend a state, name it with the extension alias followed by a colon followed
                by a unique identification of the state. </para>
            <example>
                <title>Extending Headers and States: XML</title>
                <programlisting language="xml">
                <?dbfo keep-together="always"?>    
<xi:include href="samples/apix-header.xml" parse="text"/>
                </programlisting>
            </example>
            <example>
                <title>Extending Headers and States: JSON</title>
                <programlisting language="javascript">
                <?dbfo keep-together="always"?>
<xi:include href="samples/apix-header.json" parse="text"/>
                </programlisting>
            </example>
        </section>
        <section>
            <title>Extending Resources</title>
            <para>
               All major resources can reference an extension via <code>/ext</code>. 
            </para>
            <para> Extensions are always defined at
                    <parameter>/path/to/resource</parameter><code>/ext/</code><parameter>ext-alias/newResource</parameter>. </para>
        </section>
        <section>
            <title>Extending Parameters</title>
            <para> To extend a parameter, append the alias of the relevant extension followed by a
                colon followed by the name of that extension's parameter. For example, a &GET;
                against https://api.servers.rackspacecloud.com/v1.0/224532/servers?RAX-PIE:test=1244
                sets the <code>RAX-PIE</code> extension's <code>test</code> parameter to the value
                of 1244. </para>
        </section>
    </chapter>