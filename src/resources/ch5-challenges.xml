<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
]>        

<chapter xml:id="Challenges"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">

    <title>Challenges</title>
    <para>
        While API extensions can solve some problems relating to the need for simultaneous standardization and flexibility, they can create a new set of challenges. 
        Two problematic areas are language bindings and JSON collections. 
    </para>
    <section>
        <title>Language Bindings</title>
        <para>
            API extensions should be supported at the language binding layer. 
            A simple approach may be to allow the language bindings themselves to be extensible, so that extensions may be simply added to an existing binding.
        </para>
    </section>
    <section>
        <title>JSON and Collections</title>
        <para>
            How can attributes be added to extend a collection of public addresses?
        </para>
        <example>
            <title>Question: Extending a Collection</title>
            <?dbfo keep-together="always"?>
            <programlisting language="javascript">
<xi:include href="samples/apix-address-q.json" parse="text"/>
                </programlisting>
        </example>
        <para>
            Wrap the array into an object.
        </para>
        <example>
            <title>Answer: Array as Object</title>
            <?dbfo keep-together="always"?>
            <programlisting language="javascript">
<xi:include href="samples/apix-address-a.json" parse="text"/>
                </programlisting>
        </example>
        <para>
            How can a collection be identified?
        </para>
        <example>
            <title>Question: Naming a Collection</title>
            <?dbfo keep-together="always"?>
            <programlisting language="javascript">
<xi:include href="samples/apix-collection-q.json" parse="text"/>
                </programlisting>
        </example>
        <para>
            Name the collection as the plural form of the items it contains. If the collection contains servers, name it <code>servers</code>.
        </para>
        <example>
            <title>Answer: Pluralize</title>
            <?dbfo keep-together="always"?>
            <programlisting language="javascript">
<xi:include href="samples/apix-collection-a.json" parse="text"/>
                </programlisting>
        </example>
        <para>
            A better approach is to have a single name for the array:
            <itemizedlist spacing="compact">
                <listitem>
                    <para>This is more generalizable; it always works.</para>
                </listitem>
                <listitem>
                    <para>This limits the introduction of entities not found in other representations.</para>
                </listitem>
                <listitem>
                    <para>This creates a common pattern for collections.</para>
                </listitem>
            </itemizedlist>
        </para>
        <example>
            <title>Array with Single Name</title>
            <?dbfo keep-together="always"?>
            <programlisting language="javascript">
<xi:include href="samples/apix-name-array.json" parse="text"/>
                </programlisting>
        </example>
        <para>Other approaches range from using generalizable values to ad hoc. Each approach
            has its advantages and disadvantages. It may be that there is no approach that is
            truly JSONic when dealing with collections. The goal is to provide extensibility in
            JSON without requiring a tool such as BadgerFish, generating JSON from XML. Using alias prefixes moves toward this goal. </para>
        <example>
            <title>Extensibility within a Collection</title>
            <?dbfo keep-together="always"?>
            <programlisting language="javascript">
<xi:include href="samples/apix-name-extensibility.json" parse="text"/>
                </programlisting>
        </example>   
    </section>
</chapter>
