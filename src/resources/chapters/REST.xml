<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY PATCH   '<command xmlns="http://docbook.org/ns/docbook">PATCH</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

<!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                  <imageobject role="fo">
                  <imagedata fileref="../figures/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
                 <imageobject role="html">
                  <imagedata fileref="../figures/Arrow_east.png"
                             format="PNG" />
                </imageobject>
              </inlinemediaobject>'>

]>

<chapter
    xml:id="REST"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns:common="http://docs.openstack.org/common/api/v1.0"
    xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Extensions and REST</title>
    <para>
        This chapter describes how extensions are implemented and
        consumed in REST APIs. 
    </para>
    <section xml:id="IdentifyingExtensions">
        <title>Identifying Extensions</title>
        <para>
            Extensions are queryable. Clients can detect what
            extensions are available for any specific version of an
            OpenStack API.  These extension queries return metadata
            about the extension including details on who created the
            extension and documentation on how the extension works.
        </para>
        <para>
            The following operations must be supported by all
            OpenStack APIs:
        </para>
        <wadl:resources base="https://api.openstack.com">
            <wadl:resource path="/v1/extensions">
                <wadl:method name="GET" id="listExtensions">
                    <wadl:doc xml:lang="EN" title="List Extensions">
                        <para role="shortdesc">
                            Returns a list of all available extensions.
                        </para>
                        <para>
                            This operation returns a complete list of
                            all extensions available to an OpenStack
                            API.  It is important to note that
                            extensions are always accessed at a
                            particular version. In this case, the
                            extensions listed in the response modify
                            version <emphasis
                            role="strong">v1</emphasis> of a specific
                            OpenStack API.  Extensions that modify
                            <emphasis role="strong">v2</emphasis> of
                            the API may be accessed at
                            <code>/v2/extensions</code>.  If the MIME
                            type versioning scheme is used, instead of
                            the URI scheme, then extensions will
                            always be found in
                            <code>/extensions</code>.
                        </para>
                        <para>
                            An implementation may support a large
                            number of extensions.  Because of this,
                            the extension list may be paginated via a
                            <code>next</code> link.
                        </para>
                    </wadl:doc>
                    <wadl:response status="200 203">
                        <wadl:representation mediaType="application/xml" element="common:extensions">
                            <wadl:doc xml:lang="EN">
                                <?hard-pagebreak?>
                                <example>
                                    <title>List Extensions Request: XML</title>
                                    <programlisting language="xml"><xi:include href="../samples/extensions.xml" parse="text"/></programlisting>
                                </example>
                            </wadl:doc>
                        </wadl:representation>
                        <wadl:representation mediaType="application/json">
                            <wadl:doc xml:lang="EN">
                                <?hard-pagebreak?>
                                <example>
                                    <title>List Extensions Request: JSON</title>
                                    <programlisting language="javascript"><xi:include href="../samples/extensions.json" parse="text"/></programlisting>
                                </example>
                            </wadl:doc>
                        </wadl:representation>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="/v1/extensions/{alias}">
                <wadl:param name="alias" style="template" type="xsd:string">
                    <wadl:doc xml:lang="EN" title="List Extension">
                        <para>
                            The extensions alias uniquely identifies an extension.
                        </para>
                    </wadl:doc>
                </wadl:param>
                <wadl:method name="GET" id="listExtension">
                    <wadl:doc xml:lang="EN" title="Get Extension">
                        <para role="shortdesc">
                            Lists information about a particular
                            extension if it's available.
                        </para>
                        <para>
                            This operation returns basic information
                            about an extension.  Again, note that the
                            extension is accessed at a particular
                            version. In this case, the extension
                            extends version <emphasis
                            role="strong">v1</emphasis> of an
                            OpenStack API.
                        </para>
                        <para>
                            The alias uniquely identifies an extension
                            and contains a vendor prefix, in the
                            example below <code>RAX</code>, that
                            prevents clashes between extensions
                            written by different vendors.  See <xref
                            security="writer-only" linkend="Promotion"
                            /><phrase security="draft">Chapter 4,
                            <firstterm>Extension Governance and
                            Promotion</firstterm></phrase> for a
                            detailed description of vendor prefixes.
                            A <errorcode>404</errorcode> is returned
                            if the extension is not supported, so this
                            resource can be used to quickly check for
                            the presence of a particular extension.
                        </para>
                    </wadl:doc>
                    <wadl:response status="200 203">
                        <wadl:representation mediaType="application/xml" element="common:extension">
                            <wadl:doc xml:lang="EN">
                                <example>
                                    <title>Get Extension Request: XML</title>
                                    <programlisting language="xml"><xi:include href="../samples/extension.xml" parse="text"/></programlisting>
                                </example>
                                <?hard-pagebreak?>
                            </wadl:doc>
                        </wadl:representation>
                        <wadl:representation mediaType="application/json">
                            <wadl:doc xml:lang="EN">
                                <example>
                                    <title>Get Extension Request: JSON</title>
                                    <programlisting language="javascript"><xi:include href="../samples/extension.json" parse="text"/></programlisting>
                                </example>
                            </wadl:doc>
                        </wadl:representation>
                    </wadl:response>
                    <response status="404" xmlns="http://wadl.dev.java.net/2009/02">
                        <representation mediaType="application/xml"/>
                        <representation mediaType="applicaiton/json"/>
                    </response>
                </wadl:method>
            </wadl:resource>
        </wadl:resources>
        <?hard-pagebreak?>
        <section xml:id="ExtensionMeta">
            <title>Extension Metadata</title>
            <para>
                The extension queries described above return basic
                metadata about an API's extensions. Clients can depend
                on the metadata described in the following example.
            </para>
            <example>
                <title>Extension Metadata: XML</title>
                <programlistingco>
                    <areaspec>
                        <area xml:id="query.human-readable.name" units="linecolumn" coords="5 3"/>
                        <area xml:id="query.vendor.namespace" units="linecolumn" coords="6 3"/>
                        <area xml:id="query.vendor.alias" units="linecolumn" coords="7 3"/>
                        <area xml:id="query.updated" units="linecolumn" coords="8 3"/>
                        <area xml:id="query.human-readable.description" units="linecolumn" coords="10 3"/>
                        <area xml:id="query.docs" units="linecolumn" coords="13 3"/>
                    </areaspec>
                    <programlisting language="xml"><xi:include href="../samples/extension.xml" parse="text"/></programlisting>
                </programlistingco>
            </example>
            <example>
                <title>Extension Metadata: JSON</title>
                <programlistingco>
                    <areaspec>
                        <area xml:id="json.query.human-readable.name" units="linecolumn" coords="3 3"/>
                        <area xml:id="json.query.vendor.namespace" units="linecolumn" coords="4 3"/>
                        <area xml:id="json.query.vendor.alias" units="linecolumn" coords="5 3"/>
                        <area xml:id="json.query.updated" units="linecolumn" coords="6 3"/>
                        <area xml:id="json.query.human-readable.description" units="linecolumn" coords="7 3"/>
                        <area xml:id="json.query.docs" units="linecolumn" coords="8 3"/>
                    </areaspec>
                    <programlisting language="xml"><xi:include href="../samples/extension.json" parse="text"/></programlisting>
                </programlistingco>
            </example>
            <?hard-pagebreak?>
            <calloutlist>
                <callout arearefs="query.human-readable.name">
                    <para>
                        A human readable name assigned to the extension.
                    </para>
                </callout>
                <callout arearefs="query.vendor.namespace">
                    <para>
                        A namespace that uniquely identifies the
                        extension.  The namespace should be used when
                        extending XML media types.
                    </para>
                </callout>
                <callout arearefs="query.vendor.alias">
                    <para>
                        A short name that uniquely identifies the
                        extension.  Extension aliases are prefixed
                        with a vendor identifier, here
                        <code>RAX</code>, to prevent clashes between
                        vendors.  Extension aliases are used when
                        extending non-XML media types, headers,
                        parameters, resources, actions, and states.
                    </para>
                </callout>
                <callout arearefs="query.updated">
                    <para>
                        A timestamp indicating when the extension was
                        last updated. The timestamp can be used to
                        monitor changes to an extension while it's in
                        development. 
                    </para>
                </callout>
                <callout arearefs="query.human-readable.description">
                    <para>
                        A human readable description of the
                        extension.
                    </para>
                </callout>
                <callout arearefs="query.docs">
                    <para>
                        A collection of <code>describedby</code> links
                        that provide further details on the extension.
                        At least on link  with a media type of
                        <code>application/pdf</code> is 
                        required &mdash; these PDF links should point to a
                        detailed human readable specification of the
                        extension. Other  <code>despriedby</code>
                        Links are also allowed,  including links to WADLs and XSD
                        and JSON Schema files.
                    </para>
                </callout>
            </calloutlist>
        </section>
    </section>
    <?hard-pagebreak?>
    <section>
        <title>What can be extended and how</title>
        <para>
            Extensions may define:
            <itemizedlist spacing="compact">
                <listitem>
                    <formalpara>
                        <title>New elements and attributes</title>
                        <para>
                            Extensions may add additional data
                            elements or attributes to existing MIME
                            types.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>New resources</title>
                        <para>
                            Extensions may define entirely new API
                            resources.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>New parameters</title>
                        <para>
                            Extensions may introduce new query
                            parameters to existing resources.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>New headers</title>
                        <para>
                            Extensions may define new HTTP headers.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>New verbs</title>
                        <para>
                            Extensions may introduce support for an
                            HTTP verb (&PUT;, &POST;) to an existing
                            core resource.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>New media types</title>
                        <para>
                            Extensions may define entirely new
                            representation types for existing
                            resources.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>New actions</title>
                        <para>
                            Extensions may define new actions on
                            existing resources. 
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>New states</title>
                        <para>
                            Extensions may introduce new states in an
                            API state machine.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Other capabilities</title>
                        <para>
                            Extensions may define other general API
                            capabilities. For example, the ability to
                            edit an otherwise uneditable attribute.
                        </para>
                    </formalpara>
                </listitem>
            </itemizedlist>
        </para>
        <?hard-pagebreak?>
        <section>
            <title>Adding new elements and attributes</title>
            <para>
                Extensions may add additional data elements or
                attributes to existing MIME types.  In XML, attributes
                may be added to elements so long as they in the
                extension namespace. New elements must also be in the
                extension namespace and must be added after the core
                elements.
            </para>
            <example>
                <title>Adding a new attribute: XML</title>
                <programlisting language="xml"><xi:include href="../samples/apix-data.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>Adding a new element: XML</title>
                <programlisting language="xml"><xi:include href="../samples/apix-data-elm.xml" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <para>
                New attributes and elements may also be added in JSON.
                Both of these cases equate to adding a new property in
                JSON. Here, the property name should be prefixed by
                the alias and a colon as illustrated below.
            </para>
            <example>
                <title>Adding a new properties in JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="javascript"><xi:include href="../samples/apix-data.json" parse="text"/></programlisting>
                <programlisting language="javascript"><xi:include href="../samples/apix-data-elm.json" parse="text"/></programlisting>
            </example>
        </section>
        <?hard-pagebreak?>
        <section xml:id="NewResources">
            <title>Adding new resources</title>
            <para>
                Extensions may define entirely new API resources.
                These resources should be offset by the extension
                alias. For example
                <code>/RAX-BAK/backup-schedule</code>.  This alias may
                occur at any part of the path:
                <code>/v1.1/39923/servers/3345/RAX-BAK/backup-schedule</code>. When
                an extension is promoted into the core the extension
                alias, here <code>RAX-BAK</code>, will simply be
                dropped.  A vendor may define multiple resources
                within the same alias.
            </para>
        </section>
       <section>
            <title>Adding new parameters</title>
            <para>
                Extensions may introduce new query parameters to
                existing resources.  The parameter name should be
                prepended by the extension alias followed by a
                colon. For example, a &GET; against
                https://api.servers.rackspacecloud.com/v1.0/224532/servers?RAX-PIE:img=1244
                sets the <code>RAX-PIE</code> extension's
                <parameter>img</parameter> parameter to the value of
                1244.  The extension alias and colon is dropped from
                the parameter when the extension is promoted into the
                core API.
            </para>
        </section>
        <section>
            <title>Adding new headers</title>
            <para>
                Extensions may define new HTTP headers.  The header
                names should be be prepended by a unique extensions
                alias followed by a dash. In the example below,
                <code>X-Auth-User</code> and <code>X-Auth-Key</code>
                relate to the core API; <code>RAX-CBS-Header1</code>
                and <code>RAX-CBS-Header2</code> relate to the API's
                RAX-CBS extension.  Here too, the extension alias and
                the dash is dropped when an extension is promoted into
                core.
            </para>
            <example>
                <title>Authentication Request with Extended Headers</title>
                <literallayout class="monospaced">
GET /v1.0 HTTP/1.1
Host: auth.api.openstack.com
X-Auth-User: jdoe
X-Auth-Key: a86850deb2742ec3cb41518e26aa2d89
RAX-CBS-Header1: value1
RAX-CBS-Header2: value2
                </literallayout>
            </example>
        </section>
        <section>
            <title>Adding support for a new HTTP verb</title>
            <para>
                An extension may introduce support for an otherwise
                unsupported HTTP verb (&PUT;, &POST;) to an existing
                core resource. To avoid clashes with other extensions,
                the extension may introduce the additional verb to a
                URI other than the one being extended.  For example,
                assume that an extension (<code>RAX-PATCH</code>) adds
                support for &PATCH; to a URI to an image
                <code>/v1.1/1234/image/1</code>.  The extension may
                allow the &PATCH; verb on a separate URI (using the
                rules in <xref linkend="NewResources" />),
                <code>/v1.1/1234/image/RAX-PATCH/1</code>.  The
                extension should add a link to the image
                representation so that the URI is easily
                discoverable. Note that the unique extension alias is
                used as the link relation type in this case.
            </para>
            <?hard-pagebreak?>
            <example>
                <title>Discoverable &PATCH; URI: XML</title>
                <programlisting language="xml"><xi:include href="../samples/patch.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>Discoverable &PATCH; URI: JSON</title>
                <programlisting language="javascript"><xi:include href="../samples/patch.json" parse="text"/></programlisting>
            </example>
        </section>
        <section>
            <title>Adding new media types</title>
            <para>
                Extensions may define entirely new media types for
                existing resources.  For example, an extension may
                introduce an Atom representation in addition to XML
                and JSON.  Here the extension should simply utilize
                HTTP's existing content negotiation mechanism.  For
                example, an extension that adds support for atom
                should allow clients to send an <code>ACCEPT</code>
                header with <code>application/atom+xml</code>.
            </para>
            <para>
                It may be possibible for multiple extensions to add
                support for the same media type. The situation should
                generally be avoided. Ideally, both extensions may
                behave in the exact same way. In cases where a
                distinction need be made, clients should pass the
                unique extension prefix via the <code>ext</code> mime
                type parameter as a hint to an implementaion that a
                particular extension is requested. For example,
                <code>application/atom+xml;ext=RAX-ATOM</code>.
            </para>
        </section>
        <section>
            <title>Adding new actions</title>
            <para>
                The OpenStack Compute API defines operations on a
                server as Server Actions. Extensions may define
                additional actions.  In XML, actions must be specified
                in the extension namespace.
            </para>
            <example>
                <title>Extended Action: XML</title>
                <programlisting language="xml"><xi:include href="../samples/apix-action.xml"
                parse="text"/></programlisting>
            </example>
            <para>
                Actions should be prefixed in JSON by the extension
                alias followed by a colon, as illustrated below.
            </para>
            <example>
                <title>Extended Action: JSON</title>
                <programlisting language="javascript"><xi:include href="../samples/apix-action.json"
                parse="text"/></programlisting>
            </example>
        </section>
        <section>
            <title>Adding new states</title>
            <para>
                The OpenStack Compute API also has the concept of a
                state machine.  Extensions may introduce new
                states. These states should be prepended by the unique
                extension alias followed by a colon. The extened state
                transitions should be clearly documented by the
                extension. In the example below, a server may enter a
                <code>RAX-CBS:ATTACHING</code> state only from an
                ACTIVE state.
            </para>
            <example>
                <title>Introducing a new state</title>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                <code>RAX-CBS:ATTACHING</code> &ARROW;
                                <code>ACTIVE</code>
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
            </example>
        </section>
        <section>
            <title>Adding other capabilities</title>
            <para>
                Extensions may define other general API
                capabilities. For example, the ability to edit an
                otherwise uneditable attribute. The following general
                principles should be applied in these cases.  First,
                care should be taken to avoid clashing with other
                extensions, the extension prefix or XML namespace
                should be used for this purpose. Next, the extension
                should be modeled such that the promotion path is
                well understood. And finally, the extensions should be
                well documented so that changes to the core API are
                well understood.
            </para>
        </section>
    </section>
</chapter>
