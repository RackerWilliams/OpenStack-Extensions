<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
]>
<chapter
    xml:id="REST"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns:common="http://docs.openstack.org/common/api/v1.0"
    xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Extensions and REST</title>
    <para>
        This chapter describes how extensions are implemented and
        consumed in REST APIs. 
    </para>
    <section xml:id="IdentifyingExtensions">
        <title>Identifying Extensions</title>
        <para>
            Extensions are queryable. Clients can detect what
            extensions are available for any specific version of an
            OpenStack API.  These extension queries return metadata
            about the extension including details on who created the
            extension and documentation on how the extension works.
        </para>
        <para>
            The following operations must be supported by all
            OpenStack APIs:
        </para>
        <wadl:resources base="https://api.openstack.com">
            <wadl:resource path="/v1/extensions">
                <wadl:method name="GET" id="listExtensions">
                    <wadl:doc xml:lang="EN" title="List Extensions">
                        <para role="shortdesc">
                            Returns a list of all available extensions.
                        </para>
                        <para>
                            This operation returns a complete list of
                            all extensions available to an OpenStack
                            API.  It is important to note that
                            extensions are always accessed at a
                            particular version. In this case, the
                            extensions listed in the response modify
                            version <emphasis
                            role="strong">v1</emphasis> of a specific
                            OpenStack API.  Extensions that modify
                            <emphasis role="strong">v2</emphasis> of
                            the API may be accessed at
                            <code>/v2/extensions</code>.  If the MIME
                            type versioning scheme is used, instead of
                            the URI scheme, then extensions will
                            always be found in
                            <code>/extensions</code>.
                        </para>
                        <para>
                            An implementation may support a large
                            number of extensions.  Because of this,
                            the extension list may be paginated via a
                            <code>next</code> link.
                        </para>
                    </wadl:doc>
                    <wadl:response status="200 203">
                        <wadl:representation mediaType="application/xml" element="common:extensions">
                            <wadl:doc xml:lang="EN">
                                <?hard-pagebreak?>
                                <example>
                                    <title>List Extensions Request: XML</title>
                                    <programlisting language="xml"><xi:include href="../samples/extensions.xml" parse="text"/></programlisting>
                                </example>
                            </wadl:doc>
                        </wadl:representation>
                        <wadl:representation mediaType="application/json">
                            <wadl:doc xml:lang="EN">
                                <?hard-pagebreak?>
                                <example>
                                    <title>List Extensions Request: JSON</title>
                                    <programlisting language="javascript"><xi:include href="../samples/extensions.json" parse="text"/></programlisting>
                                </example>
                            </wadl:doc>
                        </wadl:representation>
                    </wadl:response>
                </wadl:method>
            </wadl:resource>
            <wadl:resource path="/v1/extensions/{alias}">
                <wadl:param name="alias" style="template" type="xsd:string">
                    <wadl:doc xml:lang="EN" title="List Extension">
                        <para>
                            The extensions alias uniquely identifies an extension.
                        </para>
                    </wadl:doc>
                </wadl:param>
                <wadl:method name="GET" id="listExtension">
                    <wadl:doc xml:lang="EN" title="Get Extension">
                        <para role="shortdesc">
                            Lists information about a particular
                            extension if it's available.
                        </para>
                        <para>
                            This operation returns basic information
                            about an extension.  Again, note that the
                            extension is accessed at a particular
                            version. In this case, the extension
                            extends version <emphasis
                            role="strong">v1</emphasis> of an
                            OpenStack API.
                        </para>
                        <para>
                            The alias uniquely identifies an extension
                            and contains a vendor prefix, in the
                            example below <code>RAX</code>, that
                            prevents clashes between extensions
                            written by different vendors.  See <xref
                            security="writer-only" linkend="Promotion"
                            /><phrase security="draft">Chapter 4,
                            <firstterm>Extension Governance and
                            Promotion</firstterm></phrase> for a
                            detailed description of vendor prefixes.
                            A <errorcode>404</errorcode> is returned
                            if the extension is not supported, so this
                            resource can be used to quickly check for
                            the presence of a particular extension.
                        </para>
                    </wadl:doc>
                    <wadl:response status="200 203">
                        <wadl:representation mediaType="application/xml" element="common:extension">
                            <wadl:doc xml:lang="EN">
                                <example>
                                    <title>Get Extension Request: XML</title>
                                    <programlisting language="xml"><xi:include href="../samples/extension.xml" parse="text"/></programlisting>
                                </example>
                                <?hard-pagebreak?>
                            </wadl:doc>
                        </wadl:representation>
                        <wadl:representation mediaType="application/json">
                            <wadl:doc xml:lang="EN">
                                <example>
                                    <title>Get Extension Request: JSON</title>
                                    <programlisting language="javascript"><xi:include href="../samples/extension.json" parse="text"/></programlisting>
                                </example>
                            </wadl:doc>
                        </wadl:representation>
                    </wadl:response>
                    <response status="404" xmlns="http://wadl.dev.java.net/2009/02">
                        <representation mediaType="application/xml"/>
                        <representation mediaType="applicaiton/json"/>
                    </response>
                </wadl:method>
            </wadl:resource>
        </wadl:resources>
        <?hard-pagebreak?>
        <section xml:id="ExtensionMeta">
            <title>Extension Metadata</title>
            <para>
                The extension queries described above return basic
                metadata about an API's extensions. Clients can depend
                on the metadata described in the following example.
            </para>
            <example>
                <title>Extension Metadata: XML</title>
                <programlistingco>
                    <areaspec>
                        <area xml:id="query.human-readable.name" units="linecolumn" coords="5 3"/>
                        <area xml:id="query.vendor.namespace" units="linecolumn" coords="6 3"/>
                        <area xml:id="query.vendor.alias" units="linecolumn" coords="7 3"/>
                        <area xml:id="query.updated" units="linecolumn" coords="8 3"/>
                        <area xml:id="query.human-readable.description" units="linecolumn" coords="10 3"/>
                        <area xml:id="query.docs" units="linecolumn" coords="13 3"/>
                    </areaspec>
                    <programlisting language="xml"><xi:include href="../samples/extension.xml" parse="text"/></programlisting>
                </programlistingco>
            </example>
            <example>
                <title>Extension Metadata: JSON</title>
                <programlistingco>
                    <areaspec>
                        <area xml:id="json.query.human-readable.name" units="linecolumn" coords="3 3"/>
                        <area xml:id="json.query.vendor.namespace" units="linecolumn" coords="4 3"/>
                        <area xml:id="json.query.vendor.alias" units="linecolumn" coords="5 3"/>
                        <area xml:id="json.query.updated" units="linecolumn" coords="6 3"/>
                        <area xml:id="json.query.human-readable.description" units="linecolumn" coords="7 3"/>
                        <area xml:id="json.query.docs" units="linecolumn" coords="8 3"/>
                    </areaspec>
                    <programlisting language="xml"><xi:include href="../samples/extension.json" parse="text"/></programlisting>
                </programlistingco>
            </example>
            <?hard-pagebreak?>
            <calloutlist>
                <callout arearefs="query.human-readable.name">
                    <para>
                        A human readable name assigned to the extension.
                    </para>
                </callout>
                <callout arearefs="query.vendor.namespace">
                    <para>
                        A namespace that uniquely identifies the
                        extension.  The namespace should be used when
                        extending XML media types.
                    </para>
                </callout>
                <callout arearefs="query.vendor.alias">
                    <para>
                        A short name that uniquely identifies the
                        extension.  Extension aliases are prefixed
                        with a vendor identifier, here
                        <code>RAX</code>, to prevent clashes between
                        vendors.  Extension aliases are used when
                        extending non-XML media types, headers,
                        parameters, resources, actions, and states.
                    </para>
                </callout>
                <callout arearefs="query.updated">
                    <para>
                        A timestamp indicating when the extension was
                        last updated. The timestamp can be used to
                        monitor changes to an extension while it's in
                        development. 
                    </para>
                </callout>
                <callout arearefs="query.human-readable.description">
                    <para>
                        A human readable description of the
                        extension.
                    </para>
                </callout>
                <callout arearefs="query.docs">
                    <para>
                        A collection of <code>describedby</code> links
                        that provide further details on the extension.
                        At least on link  with a media type of
                        <code>application/pdf</code> is 
                        required &mdash; these PDF links should point to a
                        detailed human readable specification of the
                        extension. Other  <code>despriedby</code>
                        Links are also allowed,  including links to WADLs and XSD
                        and JSON Schema files.
                    </para>
                </callout>
            </calloutlist>
        </section>
    </section>
    <section>
        <title>Identifying an Extension's Vendor</title>
        <para>
            An extension alias always contains a prefix that identifies the vendor. 
        </para>
        <table frame="all">
            <title>Extension Alias Identifies Vendor</title>
            <tgroup cols="2">
                <colspec colname="c2" colnum="1" colwidth="1.0*"/>
                <colspec colname="newCol3" colnum="2" colwidth="8.66*"/>
                <thead>
                    <row>
                        <entry>Vendor</entry>
                        <entry>Prefix</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Citrix</entry>
                        <entry>
                            <para>
                                <code>CTX</code>
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>Multi-Vendor</entry>
                        <entry>
                            <code>MLTI</code>
                        </entry>
                    </row>
                    <row>
                        <entry>NASA</entry>
                        <entry>
                        <code>NASA</code></entry>
                    </row>
                    <row>
                        <entry>OpenStack</entry>
                        <entry>
                            <para>
                            <code>OS</code>... </para>
                        </entry>
                    </row>
                    <row>
                        <entry>Rackspace</entry>
                        <entry>
                        <code>RAX</code>... </entry>
                    </row>
                    <row>
                        <entry>...</entry>
                        <entry> ...</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>
            In this example, the <code>RAX</code> prefix in the
            extension's alias identifies the extension's vendor as
            Rackspace:
        </para>
        <example>
            <title>Vendor ID in Alias Extension: XML</title>
            <programlisting language="xml">
                <?dbfo keep-together="always"?>
<xi:include href="../samples/apix-vendor.xml" parse="text"/>
            </programlisting>
        </example>
        <para>
            Each extension is associated with a namespace; because the
            namespace is named to identify a vendor, the extension's
            association with a namespace also identifies the
            extensions's vendor.
        </para>
        <table frame="all">
            <title>Namespace Identifies Vendor</title>
            <tgroup cols="2">
                <colspec colname="c2" colnum="1" colwidth="1.0*"/>
                <colspec colname="newCol3" colnum="2" colwidth="8.69*"/>
                <thead>
                    <row>
                        <entry>Vendor</entry>
                        <entry>Namespace</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Citrix</entry>
                        <entry>
                            <para>
                            <code>http://docs.citrix.com</code>... </para>
                        </entry>
                    </row>
                    <row>
                        <entry>NASA</entry>
                        <entry>
                        <code>http://docs.nasa.org</code>... </entry>
                    </row>
                    <row>
                        <entry>OpenStack</entry>
                        <entry>
                            <para>
                            <code>http://docs.openstack.com/ext/OS/</code>... </para>
                        </entry>
                    </row>
                    <row>
                        <entry>Rackspace</entry>
                        <entry>
                        <code>docs.rackspacecloud.com</code>... </entry>
                    </row>
                    <row>
                        <entry>...</entry>
                        <entry>...</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>
            Providing two ways of identifying each extension's vendor
            improves the likelihood that multiple extensions can
            coexist without creating conflicts.  For this purpose, a
            namespace such as
            <code>http://docs.rackspacecloud.com/servers/api/ext/pie/v1.0</code>
            is most useful to XML media types; an alias such as
            <code>RAX-PIE</code> is most useful to non-XML media types
            such as JSON, as well as in headers and parameters.
            Because extensions are likely to be implemented by
            middleware, conflicts are possible without a standardized
            approach to identifying each extension and its vendor.
        </para>
        <figure xml:id="shared">
            <title>Two extensions add a "shared" attribute; one overrides the other.</title>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata scale="100" fileref="../figures/apix-2extensions-shared.svg" format="SVG" align="center"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="figures/apix-2extensions-shared.png" format="PNG" align="center"/>
                </imageobject>
            </mediaobject>
        </figure>
        <figure xml:id="filter">
            <title>Two extensions read a "filter" parameter; both are activated.</title>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata scale="100" fileref="../figures/apix-2extensions-filter.svg" format="SVG" align="center"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="figures/apix-2extensions-filter.png" format="PNG" align="center"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            OpenStack should maintain a registry associating extension
            vendors with prefixes and namespaces.  Anyone should be
            able to register this identifying information for a
            vendor.  The registration process should not require
            approval or coordination.
        </para>
    </section>
    <section>
        <title>What can be extended</title>
        <para>
            Extensions can define:
            <itemizedlist spacing="compact">
                <listitem>
                    <para>new elements</para>
                </listitem>
                <listitem>
                    <para>new attributes of existing elements</para>
                </listitem>
                <listitem>
                    <para>new data</para>
                </listitem>
                <listitem>
                    <para>new headers</para>
                </listitem>
                <listitem>
                    <para>new states</para>
                </listitem>
                <listitem>
                    <para>new resources</para>
                </listitem>
                <listitem>
                    <para>new parameters</para>
                </listitem>
                <listitem>
                    <para>new MIME types</para>
                </listitem>
                <listitem>
                    <para>new capabilities</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            New MIME types can provide support for Atom or plist
            representation.
        </para>
        <para>
            New capabilities can include the ability to edit an
            otherwise-uneditable attribute.
        </para>       
    </section>
    <section>
        <title>Extending Data</title>
        <para>
            Extensions can be used to add data.
        </para>
        <para>
            In XML, attributes may be added to elements if they are in
            the extension namespace.  After the final element,
            elements can be added if "Unique Particle Attribution" is
            not violated.
        </para>
        <example>
            <title>Extending Data: XML</title>
            <?dbfo keep-together="always"?>
            <programlisting language="xml">
<xi:include href="../samples/apix-data.xml" parse="text"/>
            </programlisting>
        </example>
        <para> In JSON, the action name is the alias followed by a colon. </para>
        <example>
            <title>Extending Data: JSON</title>
            <?dbfo keep-together="always"?>
            <programlisting language="javascript">    
<xi:include href="../samples/apix-data.json" parse="text"/>
            </programlisting>
        </example>
    </section>
    <section>
        <title>Extending Actions</title>
        <para>
            In XML, actions are defined by the extension namespace.
        </para>
        <example>
            <title>Extending Actions: XML</title>
            <programlisting language="xml">
                <?dbfo keep-together="always"?>    
<xi:include href="../samples/apix-action.xml" parse="text"/>
            </programlisting>
        </example>
        <para>
            In JSON, the action name is the extension alias followed
            by a colon followed by a unique identification of the
            action.
        </para>
        <example>
            <title>Extending Actions: JSON</title>
            <?dbfo keep-together="always"?>
            <programlisting language="javascript">
<xi:include href="../samples/apix-action.json" parse="text"/>
            </programlisting>
        </example>
    </section>
    <section>
        <title>Extending Headers and States</title>
        <para>
            To extend a header, name it <code>X-</code> followed by
            the extension alias followed by a unique identification of
            the header.  In the example below,
            <code>X-Auth-User</code> and <code>X-Auth-Key</code>
            relate to the core API; <code>X-RAX-CBS-Header1</code> and
            <code>X-RAX-CBS-Header2</code> relate to the API's RAX-CBS
            extension.
        </para>
        <example>
            <title>Authentication Request with Extended X-Headers</title>
            <?dbfo keep-together="always"?>
            <literallayout class="monospaced">
GET /v1.0 HTTP/1.1
Host: auth.api.openstack.com
X-Auth-User: jdoe
X-Auth-Key: a86850deb2742ec3cb41518e26aa2d89
X-RAX-CBS-Header1: value1
X-RAX-CBS-Header2: value2
            </literallayout>
        </example>
        <para> To extend a state, name it with the extension alias followed by a colon followed
        by a unique identification of the state. </para>
        <example>
            <title>Extending Headers and States: XML</title>
            <programlisting language="xml">
                <?dbfo keep-together="always"?>    
<xi:include href="../samples/apix-header.xml" parse="text"/>
            </programlisting>
        </example>
        <example>
            <title>Extending Headers and States: JSON</title>
            <programlisting language="javascript">
                <?dbfo keep-together="always"?>
<xi:include href="../samples/apix-header.json" parse="text"/>
            </programlisting>
        </example>
    </section>
    <section>
        <title>Extending Resources</title>
        <para>
            All major resources can reference an extension via
            <code>/ext</code>.
        </para>
        <para> Extensions are always defined at
        <parameter>/path/to/resource</parameter><code>/ext/</code><parameter>ext-alias/newResource</parameter>.
        </para>
    </section>
    <section>
        <title>Extending Parameters</title>
        <para>
            To extend a parameter, append the alias of the relevant
            extension followed by a colon followed by the name of that
            extension's parameter. For example, a &GET; against
            https://api.servers.rackspacecloud.com/v1.0/224532/servers?RAX-PIE:test=1244
            sets the <code>RAX-PIE</code> extension's
            <code>test</code> parameter to the value of 1244.
        </para>
    </section>
</chapter>
