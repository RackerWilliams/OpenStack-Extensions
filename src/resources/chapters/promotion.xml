<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
]>        

<chapter 
    xml:id="Promotion"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">

    <title>Extension Governance and Promotion</title>
    <para>
        This chapter describes extension governance and the process by
        which extensions can be promoted to new features in future
        revisions of an API.  It describes how to build extensions
        that will be likely promoted and it introduces the extension
        registry.
    </para>
    <section>
        <title>Specification Governance</title>
        <para> OpenStack's existing structure adequately addresses governance of API extensions
            and features. For each service, the project team lead (PTL)  handles concerns about functionality
            and resolves conflicts;
            the OpenStack Governance board provides oversight to maintain consistency and
            prevent conflicts among services.</para>
        <para>
            When OpenStack approves an extension, the extension's prefix is changed so that rather than identifying a specific vendor it identifies OpenStack as its source.
            For example, if the <code>RAX-PIE</code> extension were to be approved by OpenStack, the approved version would be known as <code>OS-PIE</code>.
            While the <code>OS-</code> prefix indicates approval by OpenStack,
            such approval does not necessarily imply that the extension is being considered for inclusion in a future revision of the API's core specification.
            A niche extension that offers highly useful functionality can gain OpenStack approval.
            Such an extension may never become a feature of the core API, but the extension can become one that is so frequently implemented that clients can rely on it in most cases.
        </para>
    </section>
    <section>
        <title>Promotion Path</title>
        <para> 
            The simplest promotion path for an extension is from a single vendor to OpenStack
            approval to implementation as a core API feature. 
        </para>
        <para> Some extensions may be developed cooperatively by more than one vendor; these are
            known as Multi-Vendor extensions and are identified by the <code>MLTI</code> prefix.
            Alternatively, an extension may begin with a single vendor but become a Multi-Vendor
            extension at some point in its life. In either of these cases, the extension follows
            same promotion path from Multi-Vendor status to OpenStack approval to implementation
            as a core API feature. </para>
        <para>
            This multi-step promotion path allows competing extensions to coexist and makes it possible to experiment with new features before deciding whether to incorporate them into the API standard.
            It also means that API specifications are written bottom-up rather than top-down, so that implementations determine new features and the API is not designed in a vacuum. 
        </para>
        <figure xml:id="promotion">
            <title>An API extension can become a core feature of the API if approved by OpenStack.</title>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata scale="80" fileref="../figures/apix-promotion.svg" format="SVG" align="center"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="figures/apix-promotion.png" format="PNG" align="center"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Some extensions should never be promoted to core features.
            This can be because the extension implements niche functionality that doesn't make sense in the core API,
            or because it implements functionality that can't be used within the core API since it would prevent a particular backend from implementing the full set of core features.
        </para>
        <para>
            For example, the ability to dynamically change the port number for a load balancer might be useful as an extension but problematic in the core API.
            If most but not all load balancers could support this feature, the extension must not be promoted into the core API.
            Instead, providing the feature via an API extension makes it available to customers who would like to use it but prevents it from creating problems for those who cannot use it.
        </para>
    </section>
    <section>
        <title>Creating Extensions Likely to Be Approved by OpenStack</title>
        <para>
            Extensions characterized by consensus, stability, and standardization are most likely to be approved and promoted by OpenStack. 
            As shown in the figure below, multiple decisions and actions between the invention of a new extension and its approval by OpenStack 
            relate to establishing broad support for the extension and preparing it to work consistently within the larger OpenStack community.
        </para>
        <figure xml:id="creation">
            <title>Consensus, stability, and standardization improve an extension's likelihood of OpenStack approval.</title>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata scale="80" fileref="../figures/apix-creation.svg/creation.svg" format="SVG" align="center"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="figures/apix-creation.png" format="PNG" align="center"/>
                </imageobject>
            </mediaobject>
        </figure>
        <section>
            <title>Building Consensus Around Extensions</title>
        <para>
            Extensions created by a single, independent author can be promoted to OpenStack-approved extensions and ultimately into the core API. 
            However, an extension is most likely to be promoted if consensus has been established around it first. 
            Multi-Vendor status is a strong indication that an extension is useful beyond a niche application; 
            extensions identified by the <code>MLTI</code> prefix may have an advantage when OpenStack considers which extensions to promote.
        </para>
        <para>
            Before undertaking to create a new extension, 
            vendors and individual software developers should compare their emerging ideas to OpenStack's list of existing extensions. 
            If an extension already provides similar or related functionality, joining an ongoing effort to develop and enhance it may be a more productive approach than initiating a new effort to develop an independent extension.
            This can accomplish two key goals:
            individuals and groups with shared interests can pool their efforts to develop an extension that meets all their needs;
            OpenStack can recognize highly-valued extensions and support their approval and promotion, making those extensions widely available as quickly as possible.   
        </para>
        <para>
            Similarly, even if no existing extension is a good match for a new idea, development, approval, and promotion of a new extension can be facilitated by
            enlisting multiple vendors in the project. 
            Just as OpenStack provides methods for software developers to communicate and collaborate on larger projects, it can enable formation of multi-vendor teams to create a new extension.
        </para>
        </section>
        <section>
            <title>Building Stable Extensions</title>
            <para>
                An extension must be stable before it can be approved by OpenStack or promoted into the core API.  
                Before submitting an extension for approval, its specification must be frozen; this makes it possible to consider a clear and finite definition of the extension.
                Otherwise, OpenStack approval would amount to a blank check, authorizing future development of the extension in unforeseen directions.
            </para>
        </section>
    </section>
    <section>
        <title>The Extension Registry</title>
        <para>
            OpenStack should create an extension registry. The
            OpenStack extension registry serves the following
            purposes:
        </para>
        <orderedlist spacing="compact">
            <listitem>
                <para>
                    It provides a central repository for all OpenStack
                    extensions organized by <abbrev>API</abbrev>.
                </para>
            </listitem>
            <listitem>
                <para>
                    It allows vendors to register vendor prefixes: (RAX,
                    HP, etc.).
                </para>
            </listitem>
        </orderedlist>
        <para>
            Note that this proposal is for a repository of extension
            specifications and <emphasis role="strong">not</emphasis>
            a repository of extension software or plugins for a
            particular OpenStack implementation.  That is, the
            repository is implementation agnostic and may describe
            extensions supported by implementations other than the
            OpenStack reference implementations (Nova, Glance, Swift,
            Keystone).
        </para>
        <section>
            <title>Benefits of a centralized repository</title>
            <para>
                Users of OpenStack APIs benefit from having a centralized
                extension repository.  While we would like to encourage
                vendors to develop extensions in coordination with the
                OpenStack community, some vendors may opt to develop their
                extensions independently. Without a centralized extension
                repository, users would have to gather information from
                various vendor websites in order to burst from one cloud
                onto another.  Adding to the confusion is the fact that
                vendor
                <inlineequation><mathphrase>X</mathphrase></inlineequation>
                may choose to provide support for an extension developed
                by vendor
                <inlineequation><mathphrase>Y</mathphrase></inlineequation>.
                It may, therefore, not be clear to users where to go to
                get information about an extension.
            </para>
            <para>
                Extension authors also benefit from having a central
                repository. The repository can be used to determine
                whether an existing extension satisfies an author's
                requirements. This can help mitigate the problem of
                extension proliferation and it may provide an opportunity
                for authors of similar extensions to combine their
                efforts.  Additionally, the repository may provide a means
                by which users can become aware of extensions not
                currently supported by their vendors, thus allowing them
                to lobby for such support.
            </para>
        </section>
        <section>
            <title>Extension Registration</title>
            <para>
                The extension registration process closely follows the
                registration process developed by the Khronos group for
                OpenGL:
                <link
                    xlink:href="http://www.opengl.org/registry/doc/rules.html">
                    http://www.opengl.org/registry/doc/rules.html</link>.
                    When creating an extension the following steps should be
                    followed:
            </para>
            <orderedlist spacing="compact">
                <listitem>
                    <formalpara>
                        <title>Determine if an existing extension can be used</title>
                        <para>
                            Reuse of an existing extension is encouraged
                            as this helps prevent the unnecessary
                            proliferation of extensions and provides a
                            means by which popular extension can be
                            promoted to the core.  Additionally, it's
                            possible that existing extensions have
                            established client support.
                        </para>
                    </formalpara>
                    <para>
                        If an extension with similar functionality exists,
                        but does not entirely meet the authors needs, then
                        authors are encouraged to collaborate on promoting
                        the extension into a multi-vendor extension.
                    </para>
                    <para>
                        Finally, an extension may be under development but
                        has not yet been released. Thus, authors are also
                        encouraged to send an email to the OpenStack
                        mailing list to see if anyone else is working on
                        an extension with similar functionality.
                    </para>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Determine if a multi-vendor or OpenStack
                        extension is appropriate</title>
                        <para>
                            If a suitable extension does not exist, an
                            author should work with other vendors to
                            determine if a muliti-vendor extension is
                            appropriate.  As with single vendor extensions,
                            multi-vendor extensions may be implemented by
                            interested parties among themselves without
                            coordination with the OpenStack community.
                            That said, Multi-vendor extensions are
                            preferred over single vendor extension during
                            the promotion processes.
                        </para>
                    </formalpara>
                    <para>
                        If the extension provides useful functionality
                        that is applicable to a wide variety of general
                        circumstances, the author should consider
                        developing the extension as an OpenStack
                        extension. OpenStack extensions are the most
                        "blessed" category of extensions.  If they are
                        generally applicable, these extensions are on the
                        fast track to becoming core API
                        features. Reference implementations will always
                        offer support for these extensions and alternate
                        implementations are also encouraged to support
                        them.  OpenStack extensions should be implemented
                        in coordination with the OpenStack community and
                        by working closely with the PTL of the service
                        being extended. OpenStack extensions go through a
                        standardization process to ensure that they
                        integrate well with the core API.
                    </para>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Register a vendor prefix, if one has not
                        already been assigned</title>
                        <para>
                            If a single vendor extension is appropriate an
                            author should register a vendor prefix with
                            the extension registry. The vendor prefix is a
                            short string that is used to prevent clashes
                            between extensions.  The following are
                            examples of vendor prefixes:
                        </para>
                    </formalpara>
                    <informaltable rules='all'>
                        <thead>
                            <tr>
                                <td align="center" colspan="1">Prefix</td>
                                <td align="center" colspan="3">Vendor</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="1">RAX</td>
                                <td colspan="3">Rackspace</td>
                            </tr>
                            <tr>
                                <td colspan="1">HP</td>
                                <td colspan="3">Hewlett-Packard</td>
                            </tr>
                            <tr>
                                <td colspan="1">CTX</td>
                                <td colspan="3">Citrix</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <para>
                        Extension aliases are always prefixed with these
                        vendor identifiers.  For example,
                        <code>RAX-BAK</code> is the extension alias for
                        Rackspace's OpenStack Compute Backup Schedule
                        Extension. These aliases are used to prevent
                        clashes in HTTP parameters, headers, and JSON
                        representations.  An example backup schedule
                        request is illustrated below.
                    </para>
                    <example>
                        <title>RAX-BAK JSON Representation</title>
                        <programlisting language="javascript"><xi:include
                        href="../samples/backup.json"
                        parse="text"/></programlisting>
                    </example>
                    <para>
                        Any vendor or individual may register a vendor
                        prefix by simply sending an email to <link
                        xlink:href="mailto:extensions@openstack.com">extensions@openstack.com</link>. There
                        is no formal approval process for prefixes other
                        that new prefixes are not allowed to clash with
                        existing ones.
                    </para>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Develop and write the extension specification</title>
                        <para>
                            Authors should start with a template for
                            writing extension specifications. Templates
                            exist in DocBook and reStructuredText formats.
                            These templates should be available in the
                            extension registry.
                        </para>
                    </formalpara>
                    <para>
                        Extensions must be written against a specific
                        version of a core OpenStack API.  If possible, it
                        is highly preferable to write extensions against
                        the most recent stable version of the
                        API. "Written against" means that new language
                        must be written as well-defined modifications to
                        the core API being referenced. It is important for
                        authors to document how the core API is affected
                        by the introduction of the extension. For example:
                        Will the extension introduce new states in the
                        compute state machine?  Should a new action be
                        introduced to bring a server to an
                        <code>ACTIVE</code> state?  It should be possible
                        for someone not involved with the development of
                        an extension to sit down with a copy of the core
                        API specification and the extension specification
                        and produce a merged document that clearly
                        specifies how the extended API should function.
                    </para>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Freeze the specification and submit it to
                        the registry</title>
                        <para>
                            When the extension specification is frozen, it
                            should be submitted via email to <link
                            xlink:href="mailto:extensions@openstack.com">extensions@openstack.com</link>
                            for inclusion in the extension registry.
                            Vendor specifications will be published as is,
                            though they may be edited to meet style an
                            formatting guidelines. OpenStack extensions
                            must gain the approval of the project's PTL
                            before publication and may undergo a
                            standardization processes.  It is expected
                            that a dialog with the project's PTL and the
                            OpenStack community be initiated before an
                            OpenStack extension is submitted for
                            publication.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title>Make the registry the source of truth for
                        the specification</title>
                        <para>
                            Once published, vendors are encouraged to link
                            directly to the extension registry when
                            referencing the specification and to not have
                            external copies of the specification that may
                            fall out of sync with the registry.  The
                            OpenStack extension registry should be the
                            source of truth for all frozen OpenStack
                            extension specifications.
                        </para>
                    </formalpara>
                </listitem>
            </orderedlist>
        </section>
    </section>
</chapter>
